name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run TypeScript type checking
      run: npm run lint
    
    - name: Run tests with coverage
      run: npm test -- --coverage
    
    - name: Build action
      run: npm run build
    
    - name: Check build output
      run: |
        ls -la dist/
        file dist/main.js
        echo "Build size: $(wc -c < dist/main.js) bytes"
    
    - name: Upload coverage reports
      if: matrix.node-version == 20
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        fail_ci_if_error: false
        verbose: true

  integration-test:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Test action with comprehensive config
      uses: ./
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        config-path: "examples/comprehensive-config.yml"
    
    - name: Test action with simple config
      uses: ./
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        config-path: "examples/simple-config.yml"
      continue-on-error: true

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run security audit
      run: npm audit --audit-level=moderate
    
    - name: Check for vulnerable dependencies
      run: npm audit --audit-level=high --dry-run

  lint-and-format:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Check TypeScript compilation
      run: npx tsc --noEmit
    
    - name: Validate action.yml
      run: |
        # Basic validation that action.yml is valid YAML
        cat action.yml | grep -E '^(name|description|inputs|runs):' > /dev/null
        echo "action.yml structure validation passed"
    
    - name: Validate example configurations
      run: |
        # Test that example configs are valid YAML
        for file in examples/*.yml; do
          echo "Validating $file"
          node -e "
            const yaml = require('js-yaml');
            const fs = require('fs');
            try {
              yaml.load(fs.readFileSync('$file', 'utf8'));
              console.log('$file is valid YAML');
            } catch (e) {
              console.error('$file is invalid:', e.message);
              process.exit(1);
            }
          "
        done

  build-verification:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Clean build
      run: npm run clean || true
    
    - name: Fresh build
      run: npm run build
    
    - name: Verify build artifacts
      run: |
        # Check that required files exist
        [ -f "dist/main.js" ] || { echo "dist/main.js missing"; exit 1; }
        [ -f "action.yml" ] || { echo "action.yml missing"; exit 1; }
        [ -f "package.json" ] || { echo "package.json missing"; exit 1; }
        [ -f "README.MD" ] || { echo "README.MD missing"; exit 1; }

        # Check that build is not broken
        node -e "require('./dist/main.js')" || { echo "Built action is not loadable"; exit 1; }

        echo "All build artifacts verified"

    - name: Check for sensitive files
      run: |
        # Ensure no sensitive files are committed
        if find . -name "*.env*" -o -name "*.key" -o -name "*.pem" -o -name "*.p12" | grep -v node_modules | grep -v ".env.example"; then
          echo "Sensitive files found in repository"
          exit 1
        fi

        # Check for source maps in dist (should be excluded)
        if find dist/ -name "*.map" 2>/dev/null | head -1; then
          echo "Source map files found in dist/ (security risk)"
          exit 1
        fi

        echo "No sensitive files found"
