name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        echo "üîß Installing dependencies..."
        # Try npm ci first, fallback to npm install if registry issues
        npm ci || {
          echo "‚ö†Ô∏è npm ci failed, trying npm install as fallback..."
          npm install
        }
    
    - name: Run TypeScript type checking
      run: npm run lint
    
    - name: Run tests with coverage
      run: npm test -- --coverage
    
    - name: Build action
      run: npm run build
    
    - name: Check build output
      run: |
        ls -la dist/
        file dist/main.js
        echo "Build size: $(wc -c < dist/main.js) bytes"
    
    - name: Upload coverage reports
      if: matrix.node-version == 20
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        fail_ci_if_error: false
        verbose: true

  integration-test:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Build for integration testing
      run: |
        echo "üîß Installing dependencies for integration testing..."
        # Try npm ci first, fallback to npm install if registry issues
        npm ci || {
          echo "‚ö†Ô∏è npm ci failed, trying npm install as fallback..."
          npm install
        }
        npm run build
    
    # SELF-VALIDATION: Test CheckWise on itself (critical validation)
    - name: Self-Validation - CheckWise validates itself
      uses: ./
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        config-path: ".github/checkwise.yml"
      id: self-validation
    
    - name: Verify self-validation success
      run: |
        echo "Self-validation successful! CheckWise can validate its own PRs."
        echo "This is the ultimate integration test."
    
    - name: Test action with comprehensive config
      uses: ./
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        config-path: "examples/comprehensive-config.yml"
    
    - name: Test action with simple config
      uses: ./
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        config-path: "examples/simple-config.yml"
      continue-on-error: true

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run security audit
      run: npm audit --audit-level=moderate
    
    - name: Check for vulnerable dependencies
      run: npm audit --audit-level=high --dry-run

  lint-and-format:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Check TypeScript compilation
      run: npx tsc --noEmit
    
    - name: Validate action.yml
      run: |
        # Basic validation that action.yml is valid YAML
        cat action.yml | grep -E '^(name|description|inputs|runs):' > /dev/null
        echo "action.yml structure validation passed"
    
    - name: Validate example configurations
      run: |
        # Test that example configs are valid YAML
        for file in examples/*.yml; do
          echo "Validating $file"
          node -e "
            const yaml = require('js-yaml');
            const fs = require('fs');
            try {
              yaml.load(fs.readFileSync('$file', 'utf8'));
              console.log('$file is valid YAML');
            } catch (e) {
              console.error('$file is invalid:', e.message);
              process.exit(1);
            }
          "
        done

  build-verification:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        echo "üîß Installing dependencies for build verification..."
        # Try npm ci first, fallback to npm install if registry issues
        npm ci || {
          echo "‚ö†Ô∏è npm ci failed, trying npm install as fallback..."
          npm install
        }
    
    - name: Clean build
      run: npm run clean || true
    
    - name: Fresh build with verification
      run: npm run build:check
    
    - name: Debug build output
      run: |
        echo "Contents of dist directory:"
        ls -la dist/
        echo "All files in dist (including hidden):"
        find dist/ -type f -exec ls -la {} \;
        echo "Checking for any .map files:"
        find dist/ -name "*.map" -exec ls -la {} \; || echo "No .map files found"

    - name: Verify build artifacts
      run: |
        # Check that required files exist
        [ -f "dist/main.js" ] || { echo "dist/main.js missing"; exit 1; }
        [ -f "action.yml" ] || { echo "action.yml missing"; exit 1; }
        [ -f "package.json" ] || { echo "package.json missing"; exit 1; }
        [ -f "README.MD" ] || { echo "README.MD missing"; exit 1; }

        # Check that build is not broken
        node -e "require('./dist/main.js')" || { echo "Built action is not loadable"; exit 1; }

        echo "All build artifacts verified"

    - name: Check for sensitive files
      run: |
        echo "üîç Checking for sensitive files and source maps..."
        node -e "
          const fs = require('fs');
          const path = require('path');
          
          let hasErrors = false;
          
          // Function to recursively find files
          function findFiles(dir, patterns, excludeDirs = ['node_modules', '.git']) {
            const results = [];
            if (!fs.existsSync(dir)) return results;
            
            try {
              const items = fs.readdirSync(dir, { withFileTypes: true });
              
              for (const item of items) {
                const fullPath = path.join(dir, item.name);
                const relativePath = path.relative('.', fullPath);
                
                if (item.isDirectory() && !excludeDirs.includes(item.name)) {
                  results.push(...findFiles(fullPath, patterns, excludeDirs));
                } else if (item.isFile()) {
                  for (const pattern of patterns) {
                    if (item.name.match(pattern)) {
                      results.push(relativePath);
                      break;
                    }
                  }
                }
              }
            } catch (e) {
              // Skip directories we can't read
            }
            
            return results;
          }
          
          // Check for sensitive files
          console.log('Checking for sensitive files...');
          const sensitivePatterns = [
            /\.env$/,
            /\.env\..+$/,
            /\.key$/,
            /\.pem$/,
            /\.p12$/
          ];
          
          const sensitiveFiles = findFiles('.', sensitivePatterns)
            .filter(f => !f.includes('.env.example'));
          
          if (sensitiveFiles.length > 0) {
            console.error('‚ùå Sensitive files found in repository:');
            sensitiveFiles.forEach(f => console.error('  - ' + f));
            hasErrors = true;
          }
          
          // Check for source maps in dist/
          console.log('Checking for source map files in dist/...');
          if (fs.existsSync('dist')) {
            const sourceMapPatterns = [
              /\.js\.map$/,
              /\.ts\.map$/,
              /\.d\.ts\.map$/,
              /\.map$/
            ];
            
            const sourceMapFiles = findFiles('dist', sourceMapPatterns, []);
            
            if (sourceMapFiles.length > 0) {
              console.error('‚ùå Source map files found in dist/ (security risk):');
              sourceMapFiles.forEach(f => console.error('  - ' + f));
              hasErrors = true;
            }
          }
          
          if (hasErrors) {
            process.exit(1);
          } else {
            console.log('‚úÖ No sensitive files or source maps found');
          }
        "
