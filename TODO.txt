# Checkwise - Complete Development Roadmap

## ðŸŽ¯ Build Stack Decision

**Language**: **TypeScript** (Node.js)
- âœ… Native GitHub Actions support
- âœ… Rich ecosystem (micromatch, js-yaml, @octokit/rest)
- âœ… Fast iteration vs Go compilation
- âœ… Easy testing with Jest
- âœ… JSON/YAML parsing built-in

**Key Dependencies**:
- `@actions/core` - GitHub Actions toolkit
- `@actions/github` - GitHub context/API
- `@octokit/rest` - GitHub REST API client
- `micromatch` - File glob matching
- `js-yaml` - YAML config parsing
- `jest` - Testing framework

---

## ðŸ“‹ Phase 1: Foundation (Week 1)

### Day 1-2: Project Setup
- [x] **Repository structure**
  ```
  checkwise/
  â”œâ”€â”€ .github/
  â”‚   â”œâ”€â”€ workflows/
  â”‚   â”‚   â”œâ”€â”€ test.yml
  â”‚   â”‚   â””â”€â”€ release.yml
  â”‚   â””â”€â”€ ISSUE_TEMPLATE/
  â”œâ”€â”€ src/
  â”‚   â”œâ”€â”€ main.ts
  â”‚   â”œâ”€â”€ config.ts
  â”‚   â”œâ”€â”€ matcher.ts
  â”‚   â”œâ”€â”€ checklist.ts
  â”‚   â””â”€â”€ github.ts
  â”œâ”€â”€ __tests__/
  â”œâ”€â”€ fixtures/
  â”‚   â””â”€â”€ test-repo/
  â”œâ”€â”€ action.yml
  â”œâ”€â”€ package.json
  â”œâ”€â”€ tsconfig.json
  â””â”€â”€ README.md
  ```

- [x] **Initialize npm project**
  ```bash
  npm init -y
  npm install @actions/core @actions/github @octokit/rest micromatch js-yaml
  npm install -D typescript @types/node jest ts-jest @types/jest
  ```

- [x] **TypeScript configuration**
- [x] **Jest test setup**
- [x] **GitHub Actions CI/CD pipeline**

### Day 3-4: Core Logic - Config Parser (DIFFERENTIATION FOCUS)
- [x] **Define path-first config schema** (vs keyword-based competitors)
  ```typescript
  interface CheckwiseCfg {
    checklists: ChecklistRule[]
    options?: {
      label_filter?: string[]
      branch_pattern?: string
      comment_header?: string
    }
  }
  
  interface ChecklistRule {
    when: string[]     // FILE PATH globs (not keywords!)
    require: string[]  // checklist items
    optional?: boolean // default false
  }
  ```

- [x] **YAML-first config loader** (`src/config.ts`) - Zero JavaScript required
- [x] **Rich config validation** with path-specific error messages
- [ ] **JSON Schema generation** for editor auto-completion
- [x] **Unit tests** comparing path vs keyword approaches

### Day 5-7: File Matching Logic (KEY DIFFERENTIATOR)
- [x] **GitHub API integration** (`src/github.ts`)
  - Fetch PR files changed (paths only, no content scanning)
  - Get PR context (number, repo, etc.)
  - Handle pagination for large PRs

- [x] **Advanced glob matcher** (`src/matcher.ts`) - Core competitive advantage
  - Match file paths against patterns (not content keywords)
  - Handle complex patterns (`app/**/*.{tsx,jsx}`)
  - Support negation patterns (`!dist/**`, `!**/*.test.ts`)
  - Performance optimization for large file lists

- [x] **Path-based matching logic**
  ```typescript
  function getMatchingRules(
    changedFilePaths: string[], 
    rules: ChecklistRule[]
  ): ChecklistRule[] // No content parsing needed!
  ```

- [ ] **Benchmark tests vs keyword-based approaches**
  - Speed comparison (path vs content scan)
  - False positive rates
  - Edge cases where each approach fails

---

## ðŸ“‹ Phase 2: Checklist Generation (Week 2)

### Day 8-10: Idempotent Checklist Generator (UX DIFFERENTIATOR)
- [x] **Smart markdown checklist generator** (`src/checklist.ts`)
  ```typescript
  function generateChecklist(rules: ChecklistRule[]): string {
    // - [ ] Screenshot prima/dopo allegato
    // - [ ] Test di accessibility eseguiti
  }
  ```

- [ ] **Unique comment identification system**
  - Hidden HTML markers for comment detection
  - Diff-friendly comment structure
  - Preserve manual edits while updating structure

- [ ] **Idempotent comment logic** (KEY UX advantage)
  - Find existing Checkwise comment by marker
  - Smart diff: update only changed sections
  - Never spam with duplicate comments
  - Handle comment conflicts gracefully

- [ ] **Comment state preservation**
  - Preserve checked items across updates
  - Handle manual checklist modifications
  - Merge conflicts resolution

### Day 11-12: GitHub Integration
- [x] **Comment management** (`src/github.ts`)
  - Create/update PR comments
  - Find existing comments by marker
  - Handle API rate limits/errors

- [ ] **Status check integration**
  - Parse checkbox states from comment
  - Set GitHub status check (pending/success/failure)
  - Handle check name conflicts

### Day 13-14: Action Integration
- [x] **Main action entry point** (`src/main.ts`)
  - GitHub Actions input parsing
  - Error handling and logging
  - Action outputs for debugging

- [x] **Action metadata** (`action.yml`)
  ```yaml
  name: 'Checkwise'
  description: 'Dynamic PR checklists based on changed files'
  inputs:
    github-token:
      description: 'GitHub token'
      required: true
      default: ${{ github.token }}
    config-path:
      description: 'Path to config file'
      default: '.github/scope-mate.yml'
  runs:
    using: 'node20'
    main: 'dist/index.js'
  ```

---

## ðŸ“‹ Phase 3: Testing & Polish (Week 3)

### Day 15-17: Comprehensive Testing
- [x] **Unit tests** (>90% coverage)
  - Config parsing edge cases
  - File matching logic
  - Checklist generation
  - Comment parsing/updating

- [ ] **Integration tests**
  - Mock GitHub API responses
  - End-to-end workflow simulation
  - Error scenario handling

- [ ] **Test fixtures**
  ```
  fixtures/
  â”œâ”€â”€ configs/
  â”‚   â”œâ”€â”€ simple.yml
  â”‚   â”œâ”€â”€ complex.yml
  â”‚   â””â”€â”€ invalid.yml
  â””â”€â”€ github-responses/
      â”œâ”€â”€ pr-files.json
      â””â”€â”€ pr-comments.json
  ```

### Day 18-19: Error Handling & UX
- [ ] **Robust error handling**
  - GitHub API failures
  - Invalid config files
  - Permission issues
  - Network timeouts

- [ ] **User-friendly messages**
  - Clear config validation errors
  - Helpful setup instructions
  - Debug logging levels

- [ ] **Performance optimization**
  - Minimize API calls
  - Efficient file matching
  - Comment diff optimization

### Day 20-21: Build & Distribution
- [x] **Build pipeline**
  - TypeScript compilation
  - Bundle with ncc for distribution
  - Automated releases with semantic-release

- [x] **GitHub Actions workflow**
  ```yaml
  # .github/workflows/test.yml
  name: Test
  on: [push, pull_request]
  jobs:
    test:
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v4
        - uses: actions/setup-node@v4
        - run: npm ci
        - run: npm test
        - run: npm run build
  ```

---

## ðŸ“‹ Phase 4: Documentation & Launch (Week 4)

### Day 22-24: Competitive Documentation
- [ ] **Differentiation-focused README.md**
  - Problem statement with competitor limitations
  - **Comparison table**: Checkwise vs Danger.js vs PR templates vs keyword-based tools
  - Path-based advantages with concrete examples
  - YAML simplicity showcase

- [ ] **Zero-code configuration guide**
  - Schema documentation with examples
  - VS Code/IntelliJ YAML autocomplete setup
  - Migration guide from Danger.js

- [ ] **UX superiority demos**
  - Side-by-side: single updating comment vs comment spam
  - Performance: instant path matching vs content scanning
  - Maintenance: YAML config vs JavaScript maintenance

### Day 25-26: Real-world Testing
- [ ] **Dogfooding**
  - Install on Checkwise repo itself
  - Test with actual PRs
  - Fix discovered issues

- [ ] **Alpha testing**
  - Install on 2-3 personal repos
  - Get feedback from developer friends
  - Iterate based on real usage

### Day 27-28: Launch Preparation
- [ ] **GitHub Marketplace submission**
  - Action metadata optimization
  - Screenshots and descriptions
  - Pricing (free)

- [ ] **Community preparation**
  - Reddit r/devops post draft
  - HackerNews submission ready
  - Twitter announcement thread

---

## ðŸ“‹ Phase 5: Launch & Iteration (Week 5+)

### Launch Week
- [ ] **Release v1.0.0**
  - Tagged release with changelog
  - GitHub Marketplace publication
  - Social media announcements

- [ ] **Community outreach**
  - r/devops, r/programming posts
  - Dev.to article
  - Product Hunt submission (optional)

### Post-Launch (Weeks 6-8)
- [ ] **User feedback collection**
  - GitHub issues monitoring
  - Usage analytics (if possible)
  - Community feedback synthesis

- [ ] **Quick wins implementation**
  - Bug fixes
  - Most requested features
  - Documentation improvements

- [ ] **v1.1 features** (based on feedback)
  - Label-based filtering
  - Override command support
  - Multiple comment formats

---

## ðŸš€ Success Metrics Tracking

### Technical Metrics
- [ ] **GitHub repo health**
  - Stars growth (target: 100+ in month 1)
  - Issues response time (<24h)
  - PR review time (<48h)

### Adoption Metrics
- [ ] **Usage tracking**
  - GitHub Marketplace installs
  - Action runs (via GitHub insights)
  - Community PRs/contributions

### Quality Metrics
- [ ] **Code quality**
  - Test coverage >90%
  - Zero critical security issues
  - TypeScript strict mode

---

## ðŸ”§ Development Commands

```bash
# Setup
npm install

# Development
npm run dev          # Watch mode
npm test            # Run tests
npm run test:watch  # Watch tests
npm run build       # Production build
npm run lint        # ESLint

# Release
npm run package     # Bundle for distribution
npm run release     # Semantic release
```

---

## ðŸ“¦ Key Files Checklist

- [x] `src/main.ts` - Action entry point
- [x] `src/config.ts` - YAML config parser
- [x] `src/matcher.ts` - File pattern matching
- [x] `src/checklist.ts` - Checklist generation
- [x] `src/github.ts` - GitHub API integration
- [x] `action.yml` - GitHub Action metadata
- [x] `README.md` - Comprehensive documentation
- [x] `__tests__/` - Complete test suite
- [x] `.github/workflows/` - CI/CD pipelines

---

**Timeline**: 4 weeks full implementation + 1 week launch
**Effort**: ~20-25 hours per week (part-time friendly)
**Risk level**: Low (well-defined scope, proven patterns)